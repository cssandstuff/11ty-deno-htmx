<template>
	<label><span>light</span><div class="switch"><input type="checkbox" /></div><span>dark</span></label>
</template>

<script>
	class cTheme extends HTMLElement {
		connectedCallback() {
			const template = this.querySelector("template");

			// Swap out the template with its contents so they become visible
		  if(template!==null) template.replaceWith(template.content);

			let inputToggle = this.querySelector("input");
			let darkMode = window.localStorage.getItem("darkMode");
			
			if(!darkMode) {
				darkMode =  false
				inputToggle.checked = false;
				
			}else if(darkMode==="true") {
				darkMode =  true;
				inputToggle.checked = true;
			}

			inputToggle.addEventListener("click", () => {
				window.localStorage.setItem('darkMode', inputToggle.checked);
				inputToggle.checked ? document.documentElement.classList.add('isDark') : document.documentElement.classList.remove('isDark');
			})

		}
	}

	customElements.get('c-theme') || customElements.define('c-theme', cTheme);
</script>

<style webc:scoped>
	:host .switch + span{
		opacity: 0.4;
	}

	:host:has(input:checked) label .switch + span{
		opacity: 1;
	}
	:host:has(input:checked) label > span{
		opacity: 0.4;
	}


	:host label{
		display: flex;
		gap: 0.35em;
		align-items: center;
	}
	
	:host input{
		appearance: none;
		position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    padding: 0;
    margin: 0;
		cursor: pointer;
	}

	:host .switch{
		background-color: var(--darkgrey);
		border-radius: 99em;
		overflow: hidden;
		display: inline-block;
		width: 2.2em;
		height: 1em;
		position: relative;
		margin-bottom: -0.2em;
	}

	:host:has(input:checked) .switch{
		--darkgrey: var(--black);
	}

	:host .switch::before{
		content: "";
		background-color: rgba(255,255,255, 0.5);
		position: absolute;
		left: 0; top: 0;
		height: 1em; width: 1em;
		border-radius: 50%;
		transition: 0.3s cubic-bezier(0.22, 1.25, 0.74, 1.47);
	}

	:host .switch:has(input:checked)::before{
		transform: translateX(1.2em);
	}

</style>